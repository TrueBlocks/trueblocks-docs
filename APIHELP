<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Swagger UI</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui.css" />
    <style>
      html {
        box-sizing: border-box;
        overflow: -moz-scrollbars-vertical;
        overflow-y: scroll;
      }
      *,
      *:before,
      *:after {
        box-sizing: inherit;
      }
      body {
        margin: 0;
        background: #fafafa;
      }
    </style>
  </head>
  <body>
    <div id="swagger-ui"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui-bundle.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui-standalone-preset.js"></script>
    <script>
      window.onload = function () {
        var spec = {
          openapi: '3.0.0',
          info: {
            title: 'TrueBlocks API',
            description: 'An API for accessing cached Ethereum blockchain data and accounts',
            contact: {email: 'jrush@quickblocks.io'},
            license: {name: 'Apache 2.0', url: 'http://www.apache.org/licenses/LICENSE-2.0.html'},
            version: '0.8.04',
          },
          servers: [
            {url: 'http://localhost:8080', description: 'Local endpoints'},
            {
              url: 'https://virtserver.swaggerhub.com/trueblocks/TrueBlocks/0.8.04',
              description: 'SwaggerHub API Auto Mocking',
            },
          ],
          tags: [
            {name: 'Accounts', description: 'Access and cache transactional data'},
            {name: 'Admin', description: 'Control the scraper and build the index'},
            {name: 'Data', description: 'Access and cache blockchain-related data'},
            {name: 'State', description: 'Access to account and token state'},
            {name: 'Other', description: 'Access to other and external data'},
          ],
          paths: {
            '/export': {
              get: {
                tags: ['Accounts'],
                summary: 'Export full detail of transactions for one or more Ethereum addresses.',
                description: 'Export full detail of transactions for one or more Ethereum addresses.',
                operationId: 'accounts-export',
                parameters: [
                  {
                    name: 'addrs',
                    in: 'query',
                    description: 'one or more addresses (0x...) to export',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'topics',
                    in: 'query',
                    description: 'filter by one or more logs topics (only for --logs option)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'appearances',
                    in: 'query',
                    description: 'export a list of appearances',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'receipts',
                    in: 'query',
                    description: 'export receipts instead of transaction list',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'logs',
                    in: 'query',
                    description: 'export logs instead of transaction list',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'traces',
                    in: 'query',
                    description: 'export traces instead of transaction list',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'statements',
                    in: 'query',
                    description: 'export reconcilations instead of transaction list',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'accounting',
                    in: 'query',
                    description: 'export accounting records instead of transaction list',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'articulate',
                    in: 'query',
                    description: 'articulate transactions, traces, logs, and outputs',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'write_txs',
                    in: 'query',
                    description: 'write transactions to the cache (see notes)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'write_traces',
                    in: 'query',
                    description: 'write traces to the cache (see notes)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'skip_ddos',
                    in: 'query',
                    description: "toggle skipping over 2016 dDos transactions ('on' by default)",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'max_traces',
                    in: 'query',
                    description: 'if --skip_ddos is on, this many traces defines what a ddos transaction is (default = 250)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'freshen',
                    in: 'query',
                    description: 'freshen but do not print the exported data',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'freshen_max',
                    in: 'query',
                    description: 'maximum number of records to process for --freshen option',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'factory',
                    in: 'query',
                    description: 'scan for contract creations from the given address(es) and report address of those contracts',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'emitter',
                    in: 'query',
                    description: 'available for --logs option only, export will only export if the address emitted the event',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'count',
                    in: 'query',
                    description: 'only available for --appearances mode, if present return only the number of records',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'first_record',
                    in: 'query',
                    description: 'the first record to process',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'max_records',
                    in: 'query',
                    description: 'the maximum number of records to process before reporting',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'staging',
                    in: 'query',
                    description: 'ignored (preserved for backwards compatibility)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'unripe',
                    in: 'query',
                    description: 'ignored (preserved for backwards compatibility)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/list': {
              get: {
                tags: ['Accounts'],
                summary: 'Add or remove monitors for a given Ethereum address (or collection of addresses).',
                description: 'Add or remove monitors for a given Ethereum address (or collection of addresses).',
                operationId: 'accounts-list',
                parameters: [
                  {
                    name: 'addrs',
                    in: 'query',
                    description: 'one or more Ethereum addresses',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'staging',
                    in: 'query',
                    description: 'enable search of staging (not yet finalized) folder',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'unripe',
                    in: 'query',
                    description: 'enable search of unripe (neither staged nor finalized) folder (requires --staging)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'blooms',
                    in: 'query',
                    description: 'process query by first using Bloom filter and, if hit, downloading index chunk from remote',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'start',
                    in: 'query',
                    description: 'this value is ignored but remains for backward compatibility',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'end',
                    in: 'query',
                    description: 'this value is ignored but remains for backward compatibility',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} }, },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/tags': {
              get: {
                tags: ['Accounts'],
                operationId: 'accounts-tags',
                parameters: [
                  {
                    name: 'tags',
                    in: 'query',
                    description: 'export the list of tags and subtags only',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/names': {
              get: {
                tags: ['Accounts'],
                summary: 'Query addresses and/or names of well known accounts.',
                description: 'Query addresses and/or names of well known accounts.',
                operationId: 'accounts-names',
                parameters: [
                  {
                    name: 'terms',
                    in: 'query',
                    description: 'a space separated list of one or more search terms',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'expand',
                    in: 'query',
                    description: 'expand search to include all fields (default searches name, address, and symbol only)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'match_case',
                    in: 'query',
                    description: 'do case-sensitive search',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'all',
                    in: 'query',
                    description: 'include all accounts in the search',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'custom',
                    in: 'query',
                    description: 'include your custom named accounts',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'prefund',
                    in: 'query',
                    description: 'include prefund accounts',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'named',
                    in: 'query',
                    description: 'include well know token and airdrop addresses in the search',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'other',
                    in: 'query',
                    description: 'export other addresses if found',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'addr',
                    in: 'query',
                    description: 'display only addresses in the results (useful for scripting)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'to_custom',
                    in: 'query',
                    description: 'for editCmd only, is the edited name a custom name or not',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'clean',
                    in: 'query',
                    description: 'clean the data (addrs to lower case, sort by addr)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/collections': {
              get: {
                tags: ['Accounts'],
                operationId: 'accounts-collections',
                parameters: [
                  {
                    name: 'collections',
                    in: 'query',
                    description: 'display collections data',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/abis': {
              get: {
                tags: ['Accounts'],
                summary: 'Fetches the ABI for a smart contract.',
                description: 'Fetches the ABI for a smart contract.',
                operationId: 'accounts-abis',
                parameters: [
                  {
                    name: 'addrs',
                    in: 'query',
                    description: 'list of one or more smart contracts whose ABI to grab from EtherScan',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'canonical',
                    in: 'query',
                    description: 'convert all types to their canonical represenation and remove all spaces from display',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'known',
                    in: 'query',
                    description: "load common 'known' ABIs from cache",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'sol',
                    in: 'query',
                    description: 'file name of .sol file from which to create a new known abi (without .sol)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'find',
                    in: 'query',
                    description: 'try to search for a function declaration given a four byte code',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/rm': {
              get: {
                tags: ['Accounts'],
                operationId: 'accounts-rm',
                parameters: [
                  {
                    name: 'rm',
                    in: 'query',
                    description: 'process the request to delete, undelete, or remove monitors',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/status': {
              get: {
                tags: ['Admin'],
                summary: 'Report on status of one or more TrueBlocks caches.',
                description: 'Report on status of one or more TrueBlocks caches.',
                operationId: 'admin-status',
                parameters: [
                  {
                    name: 'modes',
                    in: 'query',
                    description: 'the type of status info to retrieve',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array', items: {type: 'string', enum: ['index', 'monitors', 'collections', 'names', 'abis', 'caches', 'some', 'all'] }
                    },
                  },
                  {
                    name: 'details',
                    in: 'query',
                    description: 'include details about items found in monitors, slurps, abis, or price caches',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'types',
                    in: 'query',
                    description: 'for cache mode only, which type(s) of cache to report',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array', items: {type: 'string', enum: ['blocks', 'transactions', 'traces', 'slurps', 'prices', 'all']}},
                  },
                  {
                    name: 'depth',
                    in: 'query',
                    description: 'for cache mode only, number of levels deep to report',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'report',
                    in: 'query',
                    description: 'show a summary of the current status of TrueBlocks (deprecated)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'terse',
                    in: 'query',
                    description: 'show a terse summary report',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'get_config',
                    in: 'query',
                    description: 'returns JSON data of the editable configuration file items',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'set_config',
                    in: 'query',
                    description: 'accepts JSON in an env variable and writes it to configuration files',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'start',
                    in: 'query',
                    description: 'first block to process (inclusive)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'end',
                    in: 'query',
                    description: 'last block to process (inclusive)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/scrape': {
              get: {
                tags: ['Admin'],
                summary: 'Decentralized blockchain scraper and block cache.',
                description: 'Decentralized blockchain scraper and block cache.',
                operationId: 'admin-scrape',
                parameters: [
                  {
                    name: 'mode',
                    in: 'query',
                    description: 'control the block and account scrapers',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: { type: 'string', enum: ['run', 'quit', 'pause', 'restart'] }
                  },
                  {
                    name: 'tool',
                    in: 'query',
                    description: 'process the index, monitors, or both (none means process timestamps only)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array', items: {type: 'string', enum: ['monitors', 'index', 'none', 'both']}},
                  },
                  {
                    name: 'n_blocks',
                    in: 'query',
                    description: 'maximum number of blocks to process (defaults to 5000)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'n_block_procs',
                    in: 'query',
                    description: 'number of block channels for blaze',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'n_addr_procs',
                    in: 'query',
                    description: 'number of address channels for blaze',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'pin',
                    in: 'query',
                    description: 'pin new chunks (and blooms) to IPFS (requires Pinata key and running IPFS node)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'publish',
                    in: 'query',
                    description: 'publish the hash of the pin manifest to the UnchainedIndex smart contract',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'sleep',
                    in: 'query',
                    description: 'the number of seconds to sleep between passes (default 14)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/blocks': {
              get: {
                tags: ['Data'],
                summary: 'Returns block(s) from local cache or directly from a running node.',
                description: 'Returns block(s) from local cache or directly from a running node.',
                operationId: 'data-blocks',
                parameters: [
                  {
                    name: 'blocks',
                    in: 'query',
                    description: 'a space-separated list of one or more blocks to retrieve',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'hashes_only',
                    in: 'query',
                    description: 'display only transaction hashes, default is to display full transaction detail',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'apps',
                    in: 'query',
                    description: 'display all address appearances included in the block',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'uniq',
                    in: 'query',
                    description: 'display only uniq addresses found per block',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'uniq_tx',
                    in: 'query',
                    description: 'display only uniq addresses found per transaction',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'count',
                    in: 'query',
                    description: 'display counts of appearances (for --apps, --uniq, or --uniq_tx) or transactions',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'uncles',
                    in: 'query',
                    description: 'display uncle blocks (if any) instead of the requested block',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'force',
                    in: 'query',
                    description: 'force a re-write of the block to the cache',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'trace',
                    in: 'query',
                    description: 'export the traces from the block as opposed to the block data',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/transactions': {
              get: {
                tags: ['Data'],
                summary: 'Retrieve a transaction from the cache or the node.',
                description: 'Retrieve a transaction from the cache or the node.',
                operationId: 'data-transactions',
                parameters: [
                  {
                    name: 'transactions',
                    in: 'query',
                    description: 'a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'articulate',
                    in: 'query',
                    description: "articulate the transactions if an ABI is found for the 'to' address",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'trace',
                    in: 'query',
                    description: "display the transaction's trace",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'force',
                    in: 'query',
                    description: 'force the results into the tx cache',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'uniq',
                    in: 'query',
                    description: 'display a list of uniq addresses found in this transaction',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/receipts': {
              get: {
                tags: ['Data'],
                summary: "Retrieve a transaction's receipt from the cache or the node.",
                description: "Retrieve a transaction's receipt from the cache or the node.",
                operationId: 'data-receipts',
                parameters: [
                  {
                    name: 'transactions',
                    in: 'query',
                    description: 'a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'articulate',
                    in: 'query',
                    description: "articulate the transactions if an ABI is found for the 'to' address",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'logs',
                    in: 'query',
                    description: "display the receipt's logs",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/logs': {
              get: {
                tags: ['Data'],
                summary: "Retrieve a transaction's logs from the cache or the node.",
                description: "Retrieve a transaction's logs from the cache or the node.",
                operationId: 'data-logs',
                parameters: [
                  {
                    name: 'transactions',
                    in: 'query',
                    description: 'a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'articulate',
                    in: 'query',
                    description: "articulate the transactions if an ABI is found for the 'to' address",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/traces': {
              get: {
                tags: ['Data'],
                summary: "Retrieve a transaction's traces from the cache or the node.",
                description: "Retrieve a transaction's traces from the cache or the node.",
                operationId: 'data-traces',
                parameters: [
                  {
                    name: 'transactions',
                    in: 'query',
                    description: 'a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'articulate',
                    in: 'query',
                    description: "articulate the transactions if an ABI is found for the 'to' address",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'count',
                    in: 'query',
                    description: 'show the number of traces for the transaction only (fast)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'skip_ddos',
                    in: 'query',
                    description: "skip over 2018 ddos during export ('on' by default)",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'max_traces',
                    in: 'query',
                    description: 'if --skip_ddos is on, this many traces defines what a ddos transaction is (default = 250)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                  {
                    name: 'filter',
                    in: 'query',
                    description: 'Call trace_filter with bang-seperated string fromBlk!toBlk[!fromAddr[!toAddr[!after[!count]]]]',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/when': {
              get: {
                tags: ['Data'],
                summary: "Finds block based on date, blockNum, timestamp, or 'special'.",
                description: "Finds block based on date, blockNum, timestamp, or 'special'.",
                operationId: 'data-when',
                parameters: [
                  {
                    name: 'block_list',
                    in: 'query',
                    description: 'one or more dates, block numbers, hashes, or special named blocks (see notes)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'list',
                    in: 'query',
                    description: "export a list of the 'special' blocks",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'timestamps',
                    in: 'query',
                    description: 'ignore other options and generate timestamps only',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'skip',
                    in: 'query',
                    description: 'only applicable if --timestamps is on, the step between block numbers in the export',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'number'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/state': {
              get: {
                tags: ['State'],
                summary: 'Retrieve the balance of one or more address at the given block(s).',
                description: 'Retrieve the balance of one or more address at the given block(s).',
                operationId: 'state-state',
                parameters: [
                  {
                    name: 'addrs',
                    in: 'query',
                    description: 'one or more addresses (0x...) from which to retrieve balances',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'blocks',
                    in: 'query',
                    description: "an optional list of one or more blocks at which to report balances, defaults to 'latest'",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'parts',
                    in: 'query',
                    description: 'control which state to export',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array',items: {type: 'string', enum: ['none', 'some', 'all', 'balance', 'nonce', 'code', 'storage', 'deployed', 'accttype'] }
                    },
                  },
                  {
                    name: 'changes',
                    in: 'query',
                    description: 'only report a balance when it changes from one block to the next',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'no_zero',
                    in: 'query',
                    description: 'suppress the display of zero balance accounts',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'call',
                    in: 'query',
                    description: 'a bang-separated string consisting of address!4-byte!bytes',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/tokens': {
              get: {
                tags: ['State'],
                summary: 'Retrieve token balances for one or more address at given block(s).',
                description: 'Retrieve token balances for one or more address at given block(s).',
                operationId: 'state-tokens',
                parameters: [
                  {
                    name: 'addrs2',
                    in: 'query',
                    description: 'two or more addresses (0x...), the first is an ERC20 token, balances for the rest are reported',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'blocks',
                    in: 'query',
                    description: "an optional list of one or more blocks at which to report balances, defaults to 'latest'",
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'parts',
                    in: 'query',
                    description: 'one or more parts of the token information to retreive',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array',items: {type: 'string', enum: ['name', 'symbol', 'decimals', 'totalSupply', 'version', 'none', 'all'] }
                    },
                  },
                  {
                    name: 'by_acct',
                    in: 'query',
                    description: 'consider each address an ERC20 token except the last, whose balance is reported for each token',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'no_zero',
                    in: 'query',
                    description: 'suppress the display of zero balance accounts',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/quotes': {
              get: {
                tags: ['Other'],
                summary: 'Freshen and/or display Ethereum price data.',
                description: 'Freshen and/or display Ethereum price data.',
                operationId: 'other-quotes',
                parameters: [
                  {
                    name: 'freshen',
                    in: 'query',
                    description: 'Freshen price database (append new data)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                  {
                    name: 'period',
                    in: 'query',
                    description: 'increment of display',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'string', enum: ['5', '15', '30', '60', '120', '240', '1440', '10080', 'hourly', 'daily', 'weekly'],},
                  },
                  {
                    name: 'pair',
                    in: 'query',
                    description: 'which price pair to freshen or list (see Poloniex)',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'string'},
                  },
                  {
                    name: 'feed',
                    in: 'query',
                    description: 'the feed for the price data',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'string', enum: ['poloniex', 'maker', 'tellor'] }
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
            '/slurp': {
              get: {
                tags: ['Other'],
                summary: 'Fetches data from EtherScan for an arbitrary address.',
                description: 'Fetches data from EtherScan for an arbitrary address.',
                operationId: 'other-slurp',
                parameters: [
                  {
                    name: 'addrs',
                    in: 'query',
                    description: 'one or more addresses to slurp from Etherscan',
                    required: true,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'blocks',
                    in: 'query',
                    description: 'an optional range of blocks to slurp',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'array', items: {type: 'string'}},
                  },
                  {
                    name: 'types',
                    in: 'query',
                    description: 'one or more types of transactions to request',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: { type: 'array',items: {type: 'string', enum: ['ext', 'int', 'token', 'nfts', 'miner', 'all'] } },
                  },
                  {
                    name: 'appearances',
                    in: 'query',
                    description: 'show only the blocknumer.tx_id appearances of the exported transactions',
                    required: false,
                    style: 'form',
                    explode: true,
                    schema: {type: 'boolean'},
                  },
                ],
                responses: {
                  '200': {
                    description: 'status of the scraper',
                    content: { 'application/json': {schema: {type: 'array', items: {$ref: '#/components/schemas/response'}}} },
                  },
                  '400': {description: 'bad input parameter'},
                },
              },
            },
          },
          components: {
            schemas: {
              response: {
                required: ['result'],
                type: 'object',
                properties: {
                  data: {
                    type: 'object',
                    example: [],
                  },
                  error: {type: 'array', example: ['error 1', 'error 2'], items: {type: 'string'}},
                },
              },
            },
          },
        };
        // Build a system
        const ui = SwaggerUIBundle({
          spec: spec,
          dom_id: '#swagger-ui',
          deepLinking: true,
          presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
          plugins: [SwaggerUIBundle.plugins.DownloadUrl],
          layout: 'StandaloneLayout',
        });
        window.ui = ui;
      };
    </script>
  </body>
</html>
